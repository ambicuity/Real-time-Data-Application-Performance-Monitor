#!/usr/bin/env python3
"""
Example: Comprehensive Performance Analysis Demo

This example demonstrates all major features of the performance monitoring tool.
"""

import time
import sys
import os

# Add the project root to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from performance_monitor.cli import PerformanceMonitorApp
from performance_monitor.data_simulator import WorkloadScenario


def run_comprehensive_demo():
    """Run a comprehensive demonstration of all features."""
    
    print("üöÄ Real-time Performance Monitor - Comprehensive Demo")
    print("=" * 60)
    print("This demo will showcase all major features of the tool:")
    print("‚Ä¢ Real-time metrics collection")
    print("‚Ä¢ Performance analysis and issue detection")
    print("‚Ä¢ Multiple simulation scenarios")
    print("‚Ä¢ Comprehensive reporting")
    print("‚Ä¢ Troubleshooting assistance")
    print("=" * 60)
    
    # Create the monitoring application
    app = PerformanceMonitorApp()
    
    # Phase 1: Baseline Performance Test
    print("\nüîç PHASE 1: Baseline Performance Analysis")
    print("-" * 40)
    print("Running normal load scenario for 30 seconds...")
    
    try:
        app.start_monitoring(
            simulate=True,
            scenario="normal_load",
            duration=30
        )
        
        print("‚úÖ Baseline test completed!")
        
        # Generate quick console report
        print("\nüìä Baseline Performance Summary:")
        app.reporter.generate_console_report(hours=1)
        
    except Exception as e:
        print(f"‚ùå Error in baseline test: {e}")
        return
        
    # Brief pause
    time.sleep(5)
    
    # Phase 2: Stress Testing
    print("\nüî• PHASE 2: Stress Testing Analysis")
    print("-" * 40)
    print("Running high-load scenario to identify bottlenecks...")
    
    try:
        app.start_monitoring(
            simulate=True,
            scenario="high_load", 
            duration=30
        )
        
        print("‚úÖ Stress test completed!")
        
        # Analyze issues detected during stress test
        issues = app.analyzer.identify_performance_issues()
        if issues:
            print(f"\n‚ö†Ô∏è  Performance Issues Detected ({len(issues)}):")
            for issue in issues:
                severity_icon = {"critical": "üî¥", "warning": "üü°", "info": "üîµ"}.get(issue.get('severity', 'info'), "‚ö™")
                print(f"  {severity_icon} {issue['type']}: {issue['description']}")
        else:
            print("\n‚úÖ No performance issues detected during stress test!")
            
    except Exception as e:
        print(f"‚ùå Error in stress test: {e}")
        return
        
    # Brief pause
    time.sleep(5)
    
    # Phase 3: Bursty Traffic Analysis
    print("\nüìà PHASE 3: Bursty Traffic Pattern Analysis")
    print("-" * 40)
    print("Testing system response to variable load patterns...")
    
    try:
        app.start_monitoring(
            simulate=True,
            scenario="bursty_traffic",
            duration=45  # Longer to see burst patterns
        )
        
        print("‚úÖ Bursty traffic test completed!")
        
        # Analyze performance trends
        trends = app.analyzer.analyze_performance_trends(hours=1)
        if trends:
            print("\nüìä Performance Trends Detected:")
            for metric_type, trend_info in trends.items():
                trend = trend_info.get('trend', 'unknown')
                trend_icon = {"increasing": "üìà", "decreasing": "üìâ", "stable": "‚û°Ô∏è"}.get(trend, "‚ùì")
                print(f"  {trend_icon} {metric_type}: {trend} (avg: {trend_info.get('mean', 0):.2f})")
                
    except Exception as e:
        print(f"‚ùå Error in bursty traffic test: {e}")
        return
        
    # Phase 4: Final Analysis and Reporting
    print("\nüìÑ PHASE 4: Comprehensive Reporting")
    print("-" * 40)
    
    try:
        # Generate multiple report formats
        html_report = "comprehensive_demo_report.html"
        json_report = "comprehensive_demo_report.json"
        
        print("Generating comprehensive HTML report...")
        app.generate_report(html_report, "html", 2)
        print(f"üìÑ HTML report saved to: {html_report}")
        
        print("Generating JSON data export...")
        app.generate_report(json_report, "json", 2)
        print(f"üìÑ JSON report saved to: {json_report}")
        
        # Final console summary
        print("\nüìä FINAL PERFORMANCE SUMMARY:")
        print("=" * 40)
        app.reporter.generate_console_report(hours=2)
        
    except Exception as e:
        print(f"‚ùå Error generating reports: {e}")
        
    # Phase 5: Recommendations
    print("\nüí° PHASE 5: Performance Recommendations")
    print("-" * 40)
    
    # Get recent metrics for analysis
    recent_metrics = app.metrics_collector.get_recent_metrics(7200)  # 2 hours
    latency_stats = app.metrics_collector.get_current_latency_stats()
    
    print("Based on the comprehensive analysis, here are the key findings:")
    
    if latency_stats:
        p95_latency = latency_stats.get('p95', 0)
        if p95_latency > 500:
            print("‚ö†Ô∏è  High latency detected - consider optimizing processing algorithms")
        elif p95_latency < 100:
            print("‚úÖ Excellent latency performance - system is well-optimized")
        else:
            print("‚úÖ Good latency performance - within acceptable ranges")
            
    print(f"üìä Total metrics collected: {len(recent_metrics):,}")
    print("üìà Performance monitoring completed successfully!")
    
    # Summary of capabilities demonstrated
    print("\nüéØ CAPABILITIES DEMONSTRATED:")
    print("‚úÖ Real-time metrics collection (latency, throughput, system resources)")
    print("‚úÖ Performance analysis and trend identification")
    print("‚úÖ Automated issue detection and alerting")
    print("‚úÖ Multiple simulation scenarios for comprehensive testing")
    print("‚úÖ Rich reporting in multiple formats (HTML, JSON, console)")
    print("‚úÖ Troubleshooting assistance and optimization recommendations")
    print("‚úÖ Impact analysis of performance changes over time")
    
    print("\nüèÅ Demo completed successfully!")
    print("Check the generated reports for detailed analysis.")


def main():
    """Main demo entry point."""
    print("Starting comprehensive performance monitoring demo...")
    print("This will run for approximately 3-4 minutes and test various scenarios.")
    print("\nPress Ctrl+C at any time to stop the demo.\n")
    
    try:
        run_comprehensive_demo()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Demo interrupted by user.")
    except Exception as e:
        print(f"\n‚ùå Unexpected error in demo: {e}")


if __name__ == "__main__":
    main()